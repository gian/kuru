{
 parserClass="org.kurulang.plugin.parser.KuruParser"
 stubParserClass="org.kurulang.plugin.parser.GeneratedParserUtilBase"

 extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

 psiClassPrefix="Kuru"
 psiImplClassSuffix="Impl"
 psiPackage="org.kurulang.plugin.psi"
 psiImplPackage="org.kurulang.plugin.psi.impl"

 elementTypeHolderClass="org.kurulang.plugin.KuruTypes"
 elementTypeClass="org.kurulang.plugin.psi.KuruElementType"
 tokenTypeClass="org.kurulang.plugin.psi.KuruTokenType"

 tokens=[
    WILD = "_"
    COMMA = ","
    LBRACE = "{"
    RBRACE = "}"
    LBRACKET = "["
    RBRACKET = "]"
    SEMICOLON = ";"
    LPAREN = "("
    RPAREN = ")"
    DOTDOTDOT = "..."
    BAR = "|"
    COLON = ":"
    COLONGT = ":>"
    EQUALOP = "="
    HASH = "#"
    ARROW = "->"
    DARROW = "=>"
    AND = "and"
    ABSTYPE = "abstype"
    AS = "as"
    CASE = "case"
    DATATYPE = "datatype"
    ELSE = "else"
    END = "end"
    EQTYPE = "eqtype"
    EXCEPTION = "exception"
    DO = "do"
    FN = "fn"
    FUN = "fun"
    FUNCTOR = "functor"
    HANDLE = "handle"
    IF = "if"
    IN = "in"
    INCLUDE = "include"
    INFIX = "infix"
    INFIXR = "infixr"
    LET = "let"
    LOCAL = "local"
    NONFIX = "nonfix"
    OF = "of"
    OP = "op"
    OPEN = "open"
    RAISE = "raise"
    REC = "rec"
    SHARING = "sharing"
    SIG = "sig"
    SIGNATURE = "signature"
    STRUCT = "struct"
    STRUCTURE = "structure"
    THEN = "then"
    TYPE = "type"
    VAL = "val"
    WHERE = "where"
    WHILE = "while"
    WITH = "with"
    WITHTYPE = "withtype"
    ORELSE = "orelse"
    ANDALSO = "andalso"
 ]

 name("exp.*")='expression'
 extends("exp.*")=exp
}

kuruFile    ::= programel ';'  kuruFile
        |  programel  kuruFile
        |

private litint ::= '~' NUM | NUM

private real   ::= '~'? NUM '.' NUM 'e' '~'? NUM
        | '~'? NUM '.' NUM

private bool      ::= 'true'
        | 'false' 

private charconst   ::= '#' string_literal

con      ::= real | litint | charconst | bool

string_literal ::= STRING

longid     ::= !KEYWORD KIDENT '.' !KEYWORD longid
        | !KEYWORD KIDENT

exp      ::= 'raise'  exp
        |  expapp 'andalso'  exp 
        |  expapp 'orelse'  exp
        |  expapp 'handle'  match
        |  expapp ':'  typ
        |  expapp '=' exp
        |  expapp
        
private expel ::= 'op' WHITE_SPACE  longid
        | 'let' declist 'in' 
           exp ';' expseq 'end' 
        | 'let' declist 'in' exp 'end'
        | con
        | string_literal
        | '('  exp ',' explist ')' 
        | '('  exp ';' expseq ')'
        | '('  exp ')'
        | '()' 
        | '['  exp ','  explist ']' 
        | '['  exp ']'
        | '[' ']' 
        | 'if' exp 'then' exp 'else' exp
          
        | 'while' exp 'do' exp 
        | 'case' exp 'of' match
        | 'fn' match
        | longid 

private expapp     ::= expel  expapp
        |  expel

private explist    ::=  exp ',' explist
        |  exp

private expseq     ::=  exp ';' expseq
        |  exp

match     ::=  pat '=>' exp '|' match 
        |  pat '=>' exp

pat      ::=  patel 'as' pat
        |  patel '::'  pat 
        |  patel ':' typ
        |  longid  patel 
        | patel

private patel     ::= '_'
        | longid 
        | con 
        | '('  pat ','  patlist ')' 
        | '('  pat ')'
        | '()' 
        | '['  patlist ']' 
        | '[' ']' 
        | '{' implicit '}' 

private patlist    ::=  pat ','  patlist
        |  pat 

private patapp     ::=  patel  patapp
        |  patel 

private implicit    ::=  longid ':' typ ',' implicit
        |  longid ':' typ

typ      ::=  typel '->' typ
        |  typapp
        |  typel  typ
        |  typel

private typel     ::=  tyvar
        | !'*' longid 
        | '('  typ ')' 

private typapp			::= typel '*' typapp
				  | typel '*' typ

private tyannopt    ::= ':'  typ

private declist    ::= dec*

private sdeclist    ::= sdec*

dec      ::= 'val' valbind
        | 'bind'  longid 'to'  longid 
        | 'type'  typebind
        | 'datatype'  KIDENT '=' 'datatype' longid
         
        | 'datatype'  databind 
        | 'fun'  funbind
        | 'structure'  strbind
        | 'signature' sigbind
        | 'infixr'  NUM  KIDENT
        | 'infixr'  KIDENT 
        | 'infix'  NUM  KIDENT
        | 'infix'  KIDENT 
        | 'exception'  KIDENT 'of'  typ 
        | 'exception'  KIDENT
        | 'open'  longid 
        | '_import'  KIDENT ':' typ 'as' KIDENT

sdec      ::= 'val'  valdesc 
        | 'eqtype'  typedesc 
        | 'type'  typedesc 
        | 'datatype'  KIDENT '=' 'datatype' longid
        | 'datatype'  databind
        | 'structure'  strdesc

valdesc    ::=  KIDENT ':'  typ 'and'  valdesc 
        |  KIDENT ':'  typ

typedesc    ::=  tyvars  KIDENT 'and'  typedesc
         |  tyvars  KIDENT

strdesc    ::=  KIDENT ':'  sign 'and' strdesc
        |  KIDENT ':'  sign

valbind    ::= 'rec'  valbind 
        | 'rec'  valbind 
        | pat '=' exp 'and' valbind
        | pat '=' exp

tyvarlist   ::=  tyvar ','  tyvarlist
        |  tyvar

tyvars     ::= '(' tyvarlist ')'
        |  tyvar
        | 

typebind    ::= tyvars  KIDENT '=' typ 'and' typebind
        | tyvars  KIDENT '=' typ

funbind    ::= funmatch 'and'  funbind
        | funmatch

funmatch    ::= 'op'  KIDENT  patapp tyannopt? '='
          exp '|' funmatch 
        | 'op'  KIDENT  patapp  tyannopt? '='
          exp 
        | KIDENT patapp tyannopt? '=' exp 
           '|' funmatch 
        | KIDENT patapp tyannopt? '=' exp

databind    ::= tyvars  KIDENT '='  conbind 'and' databind
        |  tyvars  KIDENT '='  conbind 'withtype' typebind
        | tyvars  KIDENT '='  conbind
         

conbind    ::=  KIDENT 'of'  typ '|' conbind 
        |  KIDENT 'of'  typ
        |  KIDENT '|'  conbind
        |  KIDENT

private strbind    ::=  KIDENT  sigascopt '='  str 'and' strbind
        |  KIDENT  sigascopt '='  str

private sigascopt   ::= ':>' sign
        | ':'  sign 
        | 

sigbind    ::=  KIDENT '='  sign 'and' sigbind
        |  KIDENT '='  sign

str      ::= 'struct'  declist 'end'
         
        | longid

sign      ::= 'sig'  sdeclist 'end'
        |  KIDENT

programel   ::= dec | COMMENT

