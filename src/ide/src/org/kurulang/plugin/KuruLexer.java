/* The following code was generated by JFlex 1.4.3 on 8/13/13 12:55 AM */

package org.kurulang.plugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.kurulang.plugin.psi.KuruTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/13/13 12:55 AM from the specification file
 * <tt>/Users/gian/Documents/kuru/src/ide/src/org/kurulang/plugin/Kuru.flex</tt>
 */
class KuruLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\56\1\0\1\1\1\56\22\0\1\1\1\5\1\55"+
    "\1\5\1\5\1\5\1\5\1\15\1\20\1\21\1\12\1\5\1\54"+
    "\1\4\1\14\1\5\1\16\11\17\1\6\1\52\1\5\1\7\1\10"+
    "\1\5\1\5\32\3\1\50\1\13\1\51\1\5\1\2\1\5\1\23"+
    "\1\3\1\37\1\30\1\34\1\25\1\41\1\44\1\40\2\3\1\24"+
    "\1\47\1\27\1\42\1\33\1\45\1\36\1\35\1\31\1\26\1\22"+
    "\1\43\1\46\1\32\1\3\1\0\1\53\1\0\1\11\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\3\4\1\5\1\6\1\4"+
    "\1\1\2\7\1\10\1\11\16\4\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\4\20\1\21\2\0\1\22\1\23"+
    "\2\24\2\0\2\4\1\25\4\4\1\26\1\4\1\27"+
    "\13\4\1\30\1\31\1\32\5\4\2\20\1\0\1\7"+
    "\1\0\1\33\1\34\1\35\2\4\1\36\5\4\1\37"+
    "\2\4\1\40\1\4\1\41\7\4\1\20\1\0\1\42"+
    "\3\4\1\43\1\7\1\44\1\45\3\4\1\46\1\4"+
    "\1\47\4\4\1\0\1\4\1\50\3\4\1\51\1\52"+
    "\2\4\1\53\1\4\1\0\2\4\1\54\1\4\1\52"+
    "\1\55\1\4\1\56\1\57\1\60\4\4\1\61\2\4"+
    "\1\62\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u0149\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\136"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\136\0\136"+
    "\0\136\0\136\0\136\0\136\0\u0524\0\u0553\0\u0582\0\u05b1"+
    "\0\136\0\u05e0\0\u060f\0\u0149\0\u0149\0\u063e\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\353\0\u0758\0\u0787\0\u07b6\0\u07e5"+
    "\0\353\0\u0814\0\353\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\353\0\u0a48"+
    "\0\353\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\136\0\u0b62"+
    "\0\u0b91\0\u069c\0\u0bc0\0\353\0\u0bef\0\353\0\u0c1e\0\u0c4d"+
    "\0\353\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\353\0\u0d67"+
    "\0\u0d96\0\u0dc5\0\u0df4\0\353\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\136\0\u0fca\0\u0ff9"+
    "\0\u1028\0\353\0\353\0\353\0\353\0\u1057\0\u1086\0\u10b5"+
    "\0\353\0\u10e4\0\353\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf"+
    "\0\u11fe\0\353\0\u122d\0\u125c\0\u128b\0\353\0\u12ba\0\u12e9"+
    "\0\u1318\0\353\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432"+
    "\0\353\0\353\0\u1461\0\353\0\136\0\353\0\u1490\0\u14bf"+
    "\0\u14ee\0\u151d\0\353\0\u154c\0\u157b\0\353\0\353\0\353";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\10\1\13\2\10\1\3\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\2\6\1\25\1\26"+
    "\2\6\1\27\1\30\1\31\1\32\1\33\1\6\1\34"+
    "\1\35\1\36\3\6\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\4\1\45\1\46\11\45\1\47\4\45\1\50"+
    "\34\45\1\51\1\4\60\0\1\4\54\0\1\4\40\0"+
    "\1\52\20\0\2\6\10\0\1\53\3\6\2\0\26\6"+
    "\13\0\4\10\1\54\3\10\1\53\46\0\10\10\1\53"+
    "\46\0\2\10\1\55\5\10\1\53\46\0\10\10\1\53"+
    "\1\0\1\15\1\16\42\0\1\56\10\57\6\0\26\56"+
    "\23\0\1\60\56\0\1\60\1\0\2\16\51\0\1\61"+
    "\46\0\2\6\10\0\1\53\3\6\2\0\1\6\1\62"+
    "\24\6\11\0\2\6\10\0\1\53\3\6\2\0\5\6"+
    "\1\63\5\6\1\64\12\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\12\6\1\65\5\6\1\66\5\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\1\6\1\67\2\6"+
    "\1\70\1\71\20\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\1\6\1\72\16\6\1\73\5\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\10\6\1\74\3\6\1\75"+
    "\5\6\1\76\3\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\2\6\1\77\2\6\1\100\15\6\1\101\2\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\7\6\1\102"+
    "\6\6\1\103\7\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\1\6\1\104\10\6\1\105\13\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\1\6\1\106\24\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\3\6\1\107\1\6"+
    "\1\110\20\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\3\6\1\111\5\6\1\112\2\6\1\113\11\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\16\6\1\114\3\6"+
    "\1\115\3\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\1\6\1\116\24\6\7\0\13\45\1\0\41\45\2\0"+
    "\1\45\1\46\11\45\1\0\41\45\1\0\1\4\27\0"+
    "\1\117\1\0\1\117\4\0\1\117\16\0\1\117\1\0"+
    "\12\45\1\120\1\0\41\45\51\0\1\121\12\0\1\6"+
    "\10\10\6\0\26\6\11\0\2\56\11\0\3\56\2\0"+
    "\26\56\13\0\10\57\61\0\2\122\37\0\12\61\1\123"+
    "\44\61\2\0\2\6\10\0\1\53\3\6\2\0\2\6"+
    "\1\124\23\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\6\6\1\125\17\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\7\6\1\126\16\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\15\6\1\127\10\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\2\6\1\130\23\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\5\6\1\131\20\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\7\6\1\132\16\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\11\6\1\133"+
    "\14\6\11\0\2\6\10\0\1\53\3\6\2\0\4\6"+
    "\1\134\21\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\12\6\1\135\13\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\13\6\1\136\12\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\6\6\1\137\17\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\7\6\1\140\16\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\14\6\1\141\11\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\17\6\1\142\6\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\16\6\1\143"+
    "\7\6\11\0\2\6\10\0\1\53\3\6\2\0\15\6"+
    "\1\144\10\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\13\6\1\145\12\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\3\6\1\146\22\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\12\6\1\147\13\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\12\6\1\150\13\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\7\6\1\151\16\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\16\6\1\152\7\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\5\6\1\153"+
    "\20\6\7\0\12\120\1\154\1\61\41\120\2\61\33\0"+
    "\1\155\23\0\12\61\1\123\6\61\1\156\35\61\2\0"+
    "\2\6\10\0\1\53\3\6\2\0\1\6\1\157\24\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\1\6\1\160"+
    "\24\6\11\0\2\6\10\0\1\53\3\6\2\0\13\6"+
    "\1\134\12\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\1\6\1\161\24\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\12\6\1\162\13\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\12\6\1\163\13\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\5\6\1\164\20\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\12\6\1\165\13\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\10\6\1\74\15\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\4\6\1\166"+
    "\21\6\11\0\2\6\10\0\1\53\3\6\2\0\5\6"+
    "\1\167\20\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\13\6\1\170\12\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\12\6\1\171\13\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\16\6\1\172\7\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\5\6\1\173\20\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\2\6\1\174\23\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\22\6\1\175\3\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\2\6\1\176"+
    "\23\6\11\0\2\6\10\0\1\53\3\6\2\0\6\6"+
    "\1\177\17\6\7\0\12\120\1\154\1\61\5\120\1\45"+
    "\33\120\2\61\42\0\1\200\16\0\2\6\10\0\1\53"+
    "\3\6\2\0\2\6\1\201\23\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\2\6\1\202\23\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\7\6\1\203\16\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\15\6\1\204\10\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\1\6\1\205"+
    "\24\6\11\0\2\6\10\0\1\53\3\6\2\0\12\6"+
    "\1\206\13\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\24\6\1\207\1\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\13\6\1\210\12\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\7\6\1\211\16\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\12\6\1\212\13\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\2\6\1\213\23\6\45\0"+
    "\1\214\22\0\2\6\10\0\1\53\3\6\2\0\13\6"+
    "\1\215\12\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\10\6\1\216\15\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\7\6\1\217\16\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\7\6\1\220\16\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\14\6\1\221\11\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\12\6\1\222\13\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\10\6\1\223\15\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\12\6\1\224"+
    "\13\6\40\0\1\225\27\0\2\6\10\0\1\53\3\6"+
    "\2\0\20\6\1\226\5\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\11\6\1\227\14\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\4\6\1\230\21\6\11\0\2\6"+
    "\10\0\1\53\3\6\2\0\4\6\1\231\21\6\11\0"+
    "\2\6\10\0\1\53\3\6\2\0\11\6\1\232\14\6"+
    "\11\0\2\6\10\0\1\53\3\6\2\0\12\6\1\233"+
    "\13\6\11\0\2\6\10\0\1\53\3\6\2\0\14\6"+
    "\1\234\11\6\11\0\2\6\10\0\1\53\3\6\2\0"+
    "\14\6\1\235\11\6\11\0\2\6\10\0\1\53\3\6"+
    "\2\0\12\6\1\236\13\6\11\0\2\6\10\0\1\53"+
    "\3\6\2\0\12\6\1\237\13\6\11\0\2\6\10\0"+
    "\1\53\3\6\2\0\12\6\1\240\13\6\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5546];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\14\1\1\11\16\1\6\11\4\1\1\11"+
    "\2\0\4\1\2\0\35\1\1\11\1\1\1\0\1\1"+
    "\1\0\31\1\1\0\1\11\21\1\1\0\13\1\1\0"+
    "\10\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  KuruLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  KuruLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { return KuruTypes.IN;
          }
        case 53: break;
        case 42: 
          { return KuruTypes.INFIX;
          }
        case 54: break;
        case 29: 
          { return KuruTypes.LET;
          }
        case 55: break;
        case 33: 
          { return KuruTypes.REC;
          }
        case 56: break;
        case 13: 
          { return KuruTypes.BAR;
          }
        case 57: break;
        case 52: 
          { return KuruTypes.SIGDEC;
          }
        case 58: break;
        case 34: 
          { yybegin(YYINITIAL); return KuruTypes.COMMENT;
          }
        case 59: break;
        case 9: 
          { return KuruTypes.RPAR;
          }
        case 60: break;
        case 36: 
          { return KuruTypes.THEN;
          }
        case 61: break;
        case 47: 
          { return KuruTypes.IMPORT;
          }
        case 62: break;
        case 3: 
          { return KuruTypes.WILD;
          }
        case 63: break;
        case 37: 
          { return KuruTypes.ELSE;
          }
        case 64: break;
        case 38: 
          { return KuruTypes.CASE;
          }
        case 65: break;
        case 45: 
          { return KuruTypes.ORELSE;
          }
        case 66: break;
        case 49: 
          { return KuruTypes.DTDEC;
          }
        case 67: break;
        case 23: 
          { return KuruTypes.DO;
          }
        case 68: break;
        case 50: 
          { return KuruTypes.WITHTYPE;
          }
        case 69: break;
        case 21: 
          { return KuruTypes.AS;
          }
        case 70: break;
        case 30: 
          { return KuruTypes.FUNDEC;
          }
        case 71: break;
        case 31: 
          { return KuruTypes.END;
          }
        case 72: break;
        case 4: 
          { return KuruTypes.IDENTIFIER;
          }
        case 73: break;
        case 22: 
          { return KuruTypes.FN;
          }
        case 74: break;
        case 16: 
          { ;
          }
        case 75: break;
        case 44: 
          { return KuruTypes.STRUCT;
          }
        case 76: break;
        case 10: 
          { return KuruTypes.LSQ;
          }
        case 77: break;
        case 7: 
          { return KuruTypes.LITERAL;
          }
        case 78: break;
        case 41: 
          { return KuruTypes.RAISE;
          }
        case 79: break;
        case 6: 
          { return KuruTypes.EQ;
          }
        case 80: break;
        case 46: 
          { return KuruTypes.HANDLE;
          }
        case 81: break;
        case 14: 
          { return KuruTypes.COMMA;
          }
        case 82: break;
        case 27: 
          { return KuruTypes.VALDEC;
          }
        case 83: break;
        case 2: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 84: break;
        case 24: 
          { return KuruTypes.IF;
          }
        case 85: break;
        case 15: 
          { yybegin(STRING);
          }
        case 86: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 87: break;
        case 5: 
          { return KuruTypes.COLON;
          }
        case 88: break;
        case 32: 
          { return KuruTypes.SIG;
          }
        case 89: break;
        case 28: 
          { return KuruTypes.AND;
          }
        case 90: break;
        case 51: 
          { return KuruTypes.STRUCTDEC;
          }
        case 91: break;
        case 8: 
          { return KuruTypes.LPAR;
          }
        case 92: break;
        case 20: 
          { return KuruTypes.TYPEVAR;
          }
        case 93: break;
        case 39: 
          { return KuruTypes.OPEN;
          }
        case 94: break;
        case 35: 
          { return KuruTypes.TYPEDEC;
          }
        case 95: break;
        case 12: 
          { return KuruTypes.SEMI;
          }
        case 96: break;
        case 11: 
          { return KuruTypes.RSQ;
          }
        case 97: break;
        case 48: 
          { return KuruTypes.ANDALSO;
          }
        case 98: break;
        case 40: 
          { return KuruTypes.LOCAL;
          }
        case 99: break;
        case 26: 
          { return KuruTypes.OF;
          }
        case 100: break;
        case 19: 
          { return KuruTypes.CONS;
          }
        case 101: break;
        case 17: 
          { yybegin(YYINITIAL); return KuruTypes.STRING;
          }
        case 102: break;
        case 43: 
          { return KuruTypes.WHILE;
          }
        case 103: break;
        case 18: 
          { return KuruTypes.TARROW;
          }
        case 104: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
